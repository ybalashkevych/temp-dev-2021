#!/bin/bash

#
# cursor-process-pr.sh
# LiveAssistant
#
# Processes a PR that needs attention by:
# 1. Fetching PR details (branch, comments, reviews)
# 2. Checking out the PR branch
# 3. Extracting all feedback
# 4. Creating a feedback file for Cursor to process
#

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Check arguments
if [ $# -lt 1 ]; then
    echo -e "${RED}Usage: $0 <pr-number>${NC}"
    exit 1
fi

PR_NUMBER=$1

# Logging function
log() {
    local level=$1
    shift
    local message="$@"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case $level in
        INFO)
            echo -e "${BLUE}[${timestamp}] [PR#${PR_NUMBER}] [INFO]${NC} ${message}"
            ;;
        SUCCESS)
            echo -e "${GREEN}[${timestamp}] [PR#${PR_NUMBER}] [SUCCESS]${NC} ${message}"
            ;;
        WARNING)
            echo -e "${YELLOW}[${timestamp}] [PR#${PR_NUMBER}] [WARNING]${NC} ${message}"
            ;;
        ERROR)
            echo -e "${RED}[${timestamp}] [PR#${PR_NUMBER}] [ERROR]${NC} ${message}"
            ;;
    esac
}

log INFO "Starting PR processing"

# Verify PR exists
if ! gh pr view "$PR_NUMBER" &> /dev/null; then
    log ERROR "PR #${PR_NUMBER} not found"
    exit 1
fi

# Get PR details
log INFO "Fetching PR details..."
PR_DATA=$(gh pr view "$PR_NUMBER" --json number,title,headRefName,comments,reviews,reviewRequests)

if [ $? -ne 0 ]; then
    log ERROR "Failed to fetch PR details"
    exit 1
fi

# Extract information
BRANCH=$(echo "$PR_DATA" | jq -r '.headRefName')
PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')

log INFO "PR Title: $PR_TITLE"
log INFO "Branch: $BRANCH"

# Fetch latest from origin
log INFO "Fetching latest changes..."
git fetch origin

# Check if branch exists locally
if git show-ref --verify --quiet "refs/heads/$BRANCH"; then
    log INFO "Branch exists locally, checking out and updating..."
    git checkout "$BRANCH"
    git pull origin "$BRANCH"
else
    log INFO "Branch doesn't exist locally, checking out from origin..."
    git checkout -b "$BRANCH" "origin/$BRANCH"
fi

log SUCCESS "Checked out branch: $BRANCH"

# Extract comments
log INFO "Extracting feedback from comments..."
COMMENTS=$(echo "$PR_DATA" | jq -r '.comments[] | "[\(.author.login) - \(.createdAt)]\n\(.body)\n"' 2>/dev/null || echo "")

# Extract reviews
log INFO "Extracting feedback from reviews..."
REVIEWS=$(echo "$PR_DATA" | jq -r '.reviews[] | "[\(.author.login) - \(.submittedAt)] State: \(.state)\n\(.body // "No comment")\n"' 2>/dev/null || echo "")

# Get changes requested reviews specifically
CHANGES_REQUESTED=$(echo "$PR_DATA" | jq -r '.reviews[] | select(.state=="CHANGES_REQUESTED") | .body' 2>/dev/null || echo "")

# Count feedback items
COMMENT_COUNT=$(echo "$PR_DATA" | jq '.comments | length' 2>/dev/null || echo "0")
REVIEW_COUNT=$(echo "$PR_DATA" | jq '.reviews | length' 2>/dev/null || echo "0")

log INFO "Found ${COMMENT_COUNT} comment(s) and ${REVIEW_COUNT} review(s)"

# Create feedback file for Cursor
log INFO "Creating feedback file..."

cat > ".cursor-feedback.txt" << EOF
# Feedback for PR #${PR_NUMBER}: ${PR_TITLE}

Generated: $(date '+%Y-%m-%d %H:%M:%S')
Branch: ${BRANCH}

## Review Status

$(if [ -n "$CHANGES_REQUESTED" ]; then
    echo "⚠️  **CHANGES REQUESTED**"
else
    echo "ℹ️  Comments or discussion"
fi)

## Reviews Requiring Changes

$(if [ -n "$CHANGES_REQUESTED" ]; then
    echo "$CHANGES_REQUESTED"
else
    echo "No changes explicitly requested in reviews"
fi)

## All Reviews

${REVIEWS:-No reviews yet}

## Discussion Comments

${COMMENTS:-No comments yet}

## Action Items

Based on the feedback above, please:

1. **Address each review comment** - Make the requested changes
2. **Fix any linting violations** - Check inline comments on GitHub
3. **Follow architecture rules** - Maintain MVVM pattern, use Repositories not Services
4. **Update tests** - Add/modify tests as needed
5. **Run self-review** - Execute ./scripts/cursor-self-review.sh before pushing
6. **Commit and respond** - Use ./scripts/cursor-respond-to-feedback.sh after changes

## Guidelines

- Follow ARCHITECTURE.md strictly
- Use conventional commit format
- Keep changes focused on addressing feedback
- If feedback conflicts with architecture, note in response
- Ask for clarification if feedback is unclear

---

*This file was auto-generated by cursor-process-pr.sh*
*Process PRs: https://github.com/ybalashkevych/LiveAssistant/pull/${PR_NUMBER}*
EOF

log SUCCESS "Created feedback file: .cursor-feedback.txt"

# Show summary
echo ""
echo "======================================"
echo "PR #${PR_NUMBER} Processing Complete"
echo "======================================"
echo ""
echo "Branch checked out: ${BRANCH}"
echo "Feedback file created: .cursor-feedback.txt"
echo ""
echo "Next steps:"
echo "1. Read .cursor-feedback.txt"
echo "2. Make necessary changes"
echo "3. Run: ./scripts/cursor-self-review.sh"
echo "4. Run: ./scripts/cursor-respond-to-feedback.sh ${PR_NUMBER} \"<summary>\""
echo ""

# Also display the feedback file content
log INFO "Feedback summary:"
echo ""
cat .cursor-feedback.txt
echo ""

log SUCCESS "PR #${PR_NUMBER} ready for processing"

