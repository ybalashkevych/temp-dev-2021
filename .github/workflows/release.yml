name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.2.3)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: macos-26
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z (e.g., 1.2.3)"
            exit 1
          fi
          echo "✅ Version format valid: $VERSION"

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.app/Contents/Developer

      - name: Update version in Info.plist
        run: |
          VERSION="${{ github.event.inputs.version }}"
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $VERSION" LiveAssistant/Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $VERSION" LiveAssistant/Info.plist
          echo "✅ Updated Info.plist to version $VERSION"

      - name: Update version in project
        run: |
          VERSION="${{ github.event.inputs.version }}"
          # Update project version using agvtool if needed
          xcrun agvtool new-marketing-version "$VERSION" || true
          echo "✅ Updated project version to $VERSION"

      - name: Commit version changes
        run: |
          VERSION="${{ github.event.inputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add LiveAssistant/Info.plist LiveAssistant.xcodeproj/project.pbxproj || true
          git commit -m "chore: bump version to $VERSION" || echo "No changes to commit"
          git push origin main || echo "No changes to push"

      - name: Run tests
        run: |
          xcodebuild test \
            -scheme LiveAssistant \
            -destination 'platform=macOS,arch=arm64' \
            -testPlan LiveAssistant \
            -configuration Release \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO

      - name: Build release archive
        run: |
          xcodebuild archive \
            -scheme LiveAssistant \
            -destination 'platform=macOS,arch=arm64' \
            -archivePath "build/LiveAssistant.xcarchive" \
            -configuration Release \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO

      - name: Export app
        run: |
          xcodebuild -exportArchive \
            -archivePath "build/LiveAssistant.xcarchive" \
            -exportPath "build/Export" \
            -exportOptionsPlist ExportOptions.plist \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO || echo "Export may require signing configuration"
          
          # Create a simple zip if export fails
          if [ ! -f "build/Export/LiveAssistant.app" ]; then
            echo "Creating zip from archive..."
            cd build/LiveAssistant.xcarchive/Products/Applications
            zip -r ../../../../LiveAssistant.app.zip LiveAssistant.app
            cd ../../../..
          else
            cd build/Export
            zip -r ../LiveAssistant.app.zip LiveAssistant.app
            cd ../..
          fi

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            echo "First release"
            COMMIT_RANGE="HEAD"
          else
            COMMIT_RANGE="$LATEST_TAG..HEAD"
          fi
          
          # Generate release notes from commit messages
          echo "# Release $VERSION" > release_notes.md
          echo "" >> release_notes.md
          echo "## What's Changed" >> release_notes.md
          echo "" >> release_notes.md
          
          # Categorize commits by type
          echo "### 🎉 Features" >> release_notes.md
          git log $COMMIT_RANGE --oneline --grep="feat:" >> release_notes.md || echo "_No new features_" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "### 🐛 Bug Fixes" >> release_notes.md
          git log $COMMIT_RANGE --oneline --grep="fix:" >> release_notes.md || echo "_No bug fixes_" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "### 🔨 Refactoring" >> release_notes.md
          git log $COMMIT_RANGE --oneline --grep="refactor:" >> release_notes.md || echo "_No refactoring_" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "### 📝 Documentation" >> release_notes.md
          git log $COMMIT_RANGE --oneline --grep="docs:" >> release_notes.md || echo "_No documentation changes_" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "### ⚡️ Performance" >> release_notes.md
          git log $COMMIT_RANGE --oneline --grep="perf:" >> release_notes.md || echo "_No performance improvements_" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "### 🧪 Tests" >> release_notes.md
          git log $COMMIT_RANGE --oneline --grep="test:" >> release_notes.md || echo "_No test changes_" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "### 🔧 Chores" >> release_notes.md
          git log $COMMIT_RANGE --oneline --grep="chore:" >> release_notes.md || echo "_No chores_" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "---" >> release_notes.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...v$VERSION" >> release_notes.md
          
          cat release_notes.md

      - name: Create Git tag
        run: |
          VERSION="${{ github.event.inputs.version }}"
          git tag -a "v$VERSION" -m "Release version $VERSION"
          git push origin "v$VERSION"

      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const version = '${{ github.event.inputs.version }}';
            const releaseNotes = fs.readFileSync('release_notes.md', 'utf8');
            
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${version}`,
              name: `LiveAssistant v${version}`,
              body: releaseNotes,
              draft: false,
              prerelease: false
            });
            
            console.log(`✅ Created release: ${release.data.html_url}`);

      - name: Upload release assets
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const version = '${{ github.event.inputs.version }}';
            
            // Get the release we just created
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const release = releases.find(r => r.tag_name === `v${version}`);
            
            if (!release) {
              throw new Error('Release not found');
            }
            
            // Upload the app zip
            if (fs.existsSync('build/LiveAssistant.app.zip')) {
              const appZip = fs.readFileSync('build/LiveAssistant.app.zip');
              
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
                name: `LiveAssistant-${version}.zip`,
                data: appZip
              });
              
              console.log('✅ Uploaded LiveAssistant.app.zip');
            }

      - name: Post release summary
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "🎉 Release v$VERSION created successfully!"
          echo "📦 Artifacts uploaded"
          echo "🔗 View release: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"

